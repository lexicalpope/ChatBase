{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dada\"\n};\nconst _hoisted_2 = {\n  class: \"mainErea\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oneLog = _resolveComponent(\"oneLog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, _toDisplayString($data.chatArr), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatArr, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"vftest\",\n      key: $data.chatArr\n    }, _toDisplayString(chat), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_oneLog, {\n    uname: \"こころ\",\n    msg: \"おは\"\n  })]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.message = $event),\n    type: \"text\",\n    placeholder: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    \"on:click\": _cache[1] || (_cache[1] = (...args) => $options.good && $options.good(...args))\n  }, \"Send\", 32 /* HYDRATE_EVENTS */), _createElementVNode(\"button\", {\n    \"on:click\": _cache[2] || (_cache[2] = (...args) => $options.good2 && $options.good2(...args))\n  }, \"Send2\", 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"mappings":";;EAEKA,KAAK,EAAC;AAAM;;EAKVA,KAAK,EAAC;AAAU;;;uBALvBC,oBAaM,OAbNC,UAaM,GAZJC,oBAAsB,8BAAfC,aAAO,qCACdH,oBAEMI,6BAF8BD,aAAO,EAAfE,IAAI;yBAAhCL,oBAEM;MAFDD,KAAK,EAAC,QAAQ;MAA2BO,GAAG,EAAEH;wBAChDE,IAAI;kCAEPH,oBAEM,OAFNK,UAEM,GADJC,aAA8BC;IAAtBC,KAAK,EAAC,KAAK;IAACC,GAAG,EAAC;wBAE1BT,oBAAyD;+DAAxCC,aAAO;IAAES,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAAjCV,aAAO,KACxBD,oBAAwC;IAA3B,UAAM,yCAAEY,uCAAI;KAAE,MAAI,4BAC/BZ,oBAA0C;IAA7B,UAAM,yCAAEY,yCAAK;KAAE,OAAK","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","$data","_Fragment","chat","key","_hoisted_2","_createVNode","_component_oneLog","uname","msg","type","placeholder","$options"],"sourceRoot":"","sources":["/home/lexic/Chat/frontend/testchat/src/App.vue"],"sourcesContent":["\n<template>\n<div class=\"dada\">\n  <div>{{chatArr}}</div>\n  <div class=\"vftest\"  v-for=\"chat in chatArr\" :key=\"chatArr\">\n  {{ chat}}\n  </div>\n  <div class=\"mainErea\">\n    <oneLog uname=\"こころ\" msg=\"おは\"/>\n  </div>\n  <input  v-model=\"message\" type=\"text\" placeholder=\"text\">\n  <button v-on::click=\"good\">Send</button>\n  <button v-on::click=\"good2\">Send2</button>\n\n\n</div>\n</template>\n\n<script>\nimport oneLog from \"./components/oneLog\";\nimport axios from 'axios';\n\n\nexport default {\n  name: 'App',\n  data() {\n    return { count: 4 ,\n    chatArr:[],\n    baseArr:[],\n    message:'',\n    }\n  },\n  components: {\n    oneLog,\n  },\n  methods: {\n    increment() {\n      // `this` はコンポーネントインスタンスを参照\n      this.count++\n    },\n    good(){\n      console.log('fss');\n      this.chatArr.push(this.message);\n      this.message='';\n    },\n    good2(){\n      //document.body.appendChild(document.createElement(\"div\"));\n      this.chatArr.push('自分:'+this.message);\n\n      axios\n      /** \n          .get(\"http://127.0.0.1:5000/chat/api\",{\n            params: {\n            // ここにクエリパラメータを指定する\n            value:this.message\n            }   \n          })\n          */\n          .get(\"http://127.0.0.1:5000/chat/api\",{\n            params: {\n            // ここにクエリパラメータを指定する\n            value:this.message\n            }\n          })//end\n          .then((res) => {\n            console.log(res['data']);\n            console.log('p');\n            console.log(res['data']);\n            //this.posts = res.data.posts;\n            this.chatArr.push('cocoro:'+res['data']);\n            this.message='';\n          })\n          .catch((err) => {\n            console.log(err);\n            console.log('q');\n          });\n    }\n  }\n\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}