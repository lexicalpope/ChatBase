{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dada\"\n};\nconst _hoisted_2 = {\n  class: \"tmp\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"setumei\"\n}, [/*#__PURE__*/_createTextVNode(\" cocoroは言葉遣いが怖いです\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\" ♡を付けて話すと優しくなります\"), /*#__PURE__*/_createElementVNode(\"br\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Comment  <div>{{chatArr}}</div> \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatArr, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"vftest\",\n      key: chat\n    }, [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(chat), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Comment\\n  <div class=\\\"mainErea\\\">\\n    <oneLog uname=\\\"こころ\\\" msg=\\\"おは\\\"/>\\n  </div>\\n  \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.message = $event),\n    type: \"text\",\n    placeholder: \"cocoroに話しかけましょう\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    \"on:click\": _cache[1] || (_cache[1] = (...args) => $options.good2 && $options.good2(...args))\n  }, \"送信\", 32 /* HYDRATE_EVENTS */), _hoisted_3, _hoisted_4, _createCommentVNode(\" Comment\\n  <button v-on::click=\\\"good2\\\">Send2</button>\\n  \")]);\n}","map":{"version":3,"mappings":";;EAEKA,KAAK,EAAC;AAAM;;EAGVA,KAAK,EAAC;AAAK;gCAQuBC,oBAAI;gCAC3CA,oBAGM;EAHDD,KAAK,EAAC;AAAS,kCAAC,mBACL,oCAAI,uDACL,oCAAI;;;uBAdrBE,oBAqBM,OArBNC,UAqBM,GApBJC,wDAAwC,qBACxCF,oBAEMG,6BAF8BC,aAAO,EAAfC,IAAI;yBAAhCL,oBAEM;MAFDF,KAAK,EAAC,QAAQ;MAA2BQ,GAAG,EAAED;QACnDN,oBAA+B,OAA/BQ,UAA+B,mBAAZF,IAAI;kCAEvBH,iHAIG,kBACHH,oBAAoE;+DAAnDK,aAAO;IAAEI,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAAjCL,aAAO,KACxBL,oBAAuC;IAA1B,UAAM,yCAAEW,yCAAK;KAAE,IAAE,4BAASC,UAAI,EAC3CC,UAGM,EACNV,mFAEG","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_Fragment","$data","chat","key","_hoisted_2","type","placeholder","$options","_hoisted_3","_hoisted_4"],"sourceRoot":"","sources":["/home/lexic/Chat/frontend/testchat/src/App.vue"],"sourcesContent":["\n<template>\n<div class=\"dada\">\n  <!-- Comment  <div>{{chatArr}}</div> -->\n  <div class=\"vftest\"  v-for=\"chat in chatArr\" :key=\"chat\">\n  <div class=\"tmp\">{{chat}}</div>\n  </div>\n  <!-- Comment\n  <div class=\"mainErea\">\n    <oneLog uname=\"こころ\" msg=\"おは\"/>\n  </div>\n  -->\n  <input  v-model=\"message\" type=\"text\" placeholder=\"cocoroに話しかけましょう\">\n  <button v-on::click=\"good2\">送信</button><br>\n  <div class=\"setumei\">\n  cocoroは言葉遣いが怖いです<br>\n  ♡を付けて話すと優しくなります<br>\n  </div>\n  <!-- Comment\n  <button v-on::click=\"good2\">Send2</button>\n  -->\n\n\n</div>\n</template>\n\n<script>\n\n//import oneLog from \"./components/oneLog\";\nimport axios from 'axios';\n\n\nexport default {\n  name: 'App',\n  data() {\n    return { count: 4 ,\n    chatArr:[],\n    baseArr:[],\n    message:'',\n    }\n  },\n  components: {\n    //oneLog,\n  },\n  methods: {\n    increment() {\n      // `this` はコンポーネントインスタンスを参照\n      this.count++\n    },\n    good(){\n      console.log('fss');\n      this.chatArr.push(this.message);\n      this.message='';\n    },\n    good2(){\n      //document.body.appendChild(document.createElement(\"div\"));\n      this.chatArr.push('自分:'+this.message);\n      \n      axios\n      /** \n          .get(\"http://127.0.0.1:5000/chat/api\",{\n            params: {\n            // ここにクエリパラメータを指定する\n            value:this.message\n            }   \n          })\n          */\n          .get(\"http://127.0.0.1:5000/chat/api\",{\n            params: {\n            // ここにクエリパラメータを指定する\n            value:this.message\n            }\n          })//end\n          .then((res) => {\n            console.log(res['data']);\n            console.log('p');\n            console.log(res['data']);\n            //this.posts = res.data.posts;\n            this.chatArr.push('cocoro:'+res['data']);\n            this.message='';\n          })\n          .catch((err) => {\n            console.log(err);\n            console.log('q');\n          });\n    }\n  }\n\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.vftest {\n  margin-top: 2px;\n  text-align: right;\n  background-color: #FF0000;\n}\n\n.setumei {\n  margin-top: 5px;\n  text-align: center;\n  background-color: #b9b8b8;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}